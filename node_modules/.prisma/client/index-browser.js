
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.11.0
 * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
 */
Prisma.prismaVersion = {
  client: "4.11.0",
  engine: "8fde8fef4033376662cad983758335009d522acb"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ChatRoomScalarFieldEnum = makeEnum({
  id: 'id',
  participants: 'participants',
  lastMessage: 'lastMessage',
  lastMessageSender: 'lastMessageSender',
  lastMessageStatus: 'lastMessageStatus'
});

exports.Prisma.GiftScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  price: 'price',
  image: 'image',
  isAvailable: 'isAvailable',
  messageId: 'messageId'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: Prisma.JsonNull
});

exports.Prisma.MatchScalarFieldEnum = makeEnum({
  id: 'id',
  senderId: 'senderId',
  recipientId: 'recipientId',
  isConfirmed: 'isConfirmed',
  typeMatch: 'typeMatch'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  type: 'type',
  senderId: 'senderId',
  dateMessage: 'dateMessage',
  messageStatus: 'messageStatus',
  giftId: 'giftId',
  chatId: 'chatId'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  content: 'content',
  senderId: 'senderId',
  recipientId: 'recipientId',
  createdAt: 'createdAt'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  photoProfil: 'photoProfil',
  birthday: 'birthday',
  horoscope: 'horoscope',
  hobbies: 'hobbies',
  languages: 'languages',
  description: 'description',
  preference: 'preference',
  gender: 'gender',
  coins: 'coins',
  isCertified: 'isCertified',
  isFake: 'isFake',
  longitude: 'longitude',
  latitude: 'latitude',
  country: 'country',
  city: 'city',
  isOnline: 'isOnline',
  role: 'role',
  deviceToken: 'deviceToken'
});
exports.Gender = makeEnum({
  male: 'male',
  female: 'female',
  other: 'other'
});

exports.LastMessageStatus = makeEnum({
  pending: 'pending',
  sent: 'sent',
  unsent: 'unsent',
  delivered: 'delivered',
  read: 'read'
});

exports.MessageStatus = makeEnum({
  pending: 'pending',
  sent: 'sent',
  delivered: 'delivered',
  read: 'read'
});

exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN',
  AGENT: 'AGENT'
});

exports.TypeMatch = makeEnum({
  special: 'special',
  normal: 'normal'
});

exports.TypeMessage = makeEnum({
  text: 'text',
  gift: 'gift',
  file: 'file'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Match: 'Match',
  Notification: 'Notification',
  ChatRoom: 'ChatRoom',
  Message: 'Message',
  Gift: 'Gift'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
